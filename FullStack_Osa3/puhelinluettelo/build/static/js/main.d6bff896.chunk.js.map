{"version":3,"sources":["components/Filter.js","components/Person.js","components/NewPerson.js","components/Notification.js","services/personService.js","App.js","serviceWorker.js","index.js"],"names":["Filter","_ref","filter","handleFilterChange","react_default","a","createElement","value","onChange","Person","deletePerson","person","name","number","type","onClick","id","NewPerson","addPerson","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","Notification","message","messageType","className","baseUrl","personService","axios","get","then","response","data","newObject","post","put","concat","delete","App","_useState","useState","_useState2","Object","slicedToArray","persons","setPersons","_useState3","_useState4","setNewName","_useState5","_useState6","setNewNumber","_useState7","_useState8","setNewFilter","_useState9","_useState10","setMessage","_useState11","_useState12","setMessageType","useEffect","initialPersons","event","preventDefault","console","log","target","removable","window","confirm","removed","setTimeout","catch","error","filteredPersons","toLowerCase","match","components_Notification","components_Filter","components_NewPerson","Name","personObject","some","el","modifiedPerson","find","existingId","updated","newPerson","map","components_Person","key","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6bff896.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = ({ filter , handleFilterChange}) => {\n\n    return (\n        <div>\n            <form>\n                rajaa näytettäviä <input value={filter} onChange={handleFilterChange} />\n            </form>\n        </div>\n    )\n}\n\nexport default Filter","import React from 'react'\n\nconst Person = ({ deletePerson, person }) => {\n    return (\n        <div>\n            {person.name} {person.number} <button type='submit'\n                value={person.name} onClick={deletePerson}\n                id={person.id}>delete</button>\n        </div>\n    )\n}\n\nexport default Person","import React from 'react'\n\nconst NewPerson = ({addPerson, newName, newNumber, handleNameChange, handleNumberChange}) => {\n\n    return (\n        <form onSubmit={addPerson}>\n            <div>\n                nimi: <input value={newName} onChange={handleNameChange} />\n            </div>\n            <div>\n                numero: <input value={newNumber} onChange={handleNumberChange} />\n            </div>\n            <div>\n                <button type=\"submit\">lisää</button>\n            </div>\n        </form>\n    )\n}\n\n\nexport default NewPerson","import React from 'react'\n\nconst Notification = ({ message, messageType }) => {\n    if (message == null) {\n        return null\n    }\n    else if (messageType === 'success') {\n        return (\n            <div className='message'>\n                {message}\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"error\">\n                {message}\n            </div>\n        )\n    }\n\n\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default {\n    getAll: getAll,\n    create: create,\n    update: update,\n    remove: remove\n}","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport Person from './components/Person'\nimport NewPerson from './components/NewPerson'\nimport Notification from './components/Notification'\nimport personService from './services/personService'\nimport './index.css'\n\nconst App = () => {\n\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setNewFilter] = useState('')\n  const [message, setMessage] = useState(null)\n  const [messageType, setMessageType] = useState(null)\n\n  useEffect(() => {\n    personService.getAll().then(initialPersons => {\n      setPersons(initialPersons)\n    })\n  },[])\n\n\n  const handleNameChange = (event) => {\n    console.log('nimeä kirjoitetaan', event.target.value)\n    setNewName(event.target.value)\n\n  }\n  const handleNumberChange = (event) => {\n    console.log('numeroa kirjoitetaan', event.target.value)\n    setNewNumber(event.target.value)\n\n  }\n  const handleFilterChange = (event) => {\n    console.log('filtteriä kirjoitetaan', event.target.value)\n    setNewFilter(event.target.value)\n  }\n\n\n  const deletePerson = (event) => {\n\n    event.preventDefault()\n    console.log('deleteä painettu henkilölle', event.target.id)\n\n    const removable = event.target.id\n    const name = event.target.value\n    console.log(name)\n\n    if (window.confirm(`Are you sure you want to delete ${name}`)) {\n      personService.remove(removable).then(removed => {\n        setMessage(`${name} poistettu yhteystiedoista`)\n        setMessageType('success')\n        \n        personService.getAll().then(initialPersons => {\n          setPersons(initialPersons)\n        })\n\n        setTimeout(() => {\n          setMessage(null)\n          setMessageType(null)\n        }, 3000)\n      })\n        .catch(error => {\n          setMessage(`Henkilöä ${name} ei ollut palvelimella`)\n          setMessageType('error')\n          setTimeout(() => {\n            setMessage(null)\n            setMessageType(null)\n          }, 3000)\n        })\n\n\n    }\n\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    console.log('nappia painettu', event.target)\n\n    const personObject = {\n      name: newName,\n      number: newNumber,\n    }\n    function personExists(Name) {\n      return persons.some(function (el) {\n        return el.name.toLowerCase() === Name.toLowerCase()\n      })\n    }\n    function existingId(Name) {\n      return persons.find(function (el) {\n        if (el.name.toLowerCase() === Name.toLowerCase()) {\n          return el.id\n        }\n        return null\n\n      })\n    }\n\n\n    if (personExists(newName)) {\n      if (window.confirm(`${newName} already exists, do you want to replace old number with new one?`)) {\n\n        const modifiedPerson = {\n          name: newName,\n          number: newNumber,\n          id: existingId(newName).id\n        }\n        console.log(modifiedPerson.id)\n\n        personService.update(modifiedPerson.id, modifiedPerson).then(updated => {\n          setMessage(`${newName} yhteystieto muutettu`)\n          setMessageType('success')\n\n          personService.getAll().then(initialPersons => {\n            setPersons(initialPersons)\n          })\n\n          setTimeout(() => {\n            setMessage(null)\n            setMessageType(null)\n          }, 3000)\n        })\n          .catch(error => {\n            setMessage(`Henkilön ${newName} tietoja ei pystytty päivittämään`)\n            setMessageType('error')\n\n            setTimeout(() => {\n              setMessage(null)\n              setMessageType(null)\n            }, 3000)\n          })\n\n        setNewName('')\n        setNewNumber('')\n\n\n\n      }\n    } else {\n      personService\n        .create(personObject)\n        .then(newPerson => {\n\n          setPersons(persons.concat(personObject))\n          setNewName('')\n          setNewNumber('')\n\n          setMessage(`Lisättiin ${newName}`)\n          setMessageType('success')\n          personService.getAll().then(initialPersons => {\n            setPersons(initialPersons)\n          })\n\n          setTimeout(() => {\n            setMessage(null)\n            setMessageType(null)\n          }, 3000)\n        })\n        .catch(error => {\n          setMessage(`Ei pystytty lisäämään henkilöä ${error.response.data}`)\n          setMessageType('error')\n\n          console.log(error.response.data)\n\n          setTimeout(() => {\n            setMessage(null)\n            setMessageType(null)\n          }, 3000)\n        })\n\n    }\n  }\n\n  const filteredPersons = persons.filter(person => person.name.toLowerCase().match(filter.toLowerCase()))\n\n  const rows = () =>\n    filteredPersons.map(person => <Person key={person.name} person={person} deletePerson={deletePerson} />)\n\n  return (\n    <div>\n      <h1>Puhelinluettelo</h1>\n      <Notification message={message} messageType={messageType}/>\n      <Filter filter={filter} handleFilterChange={handleFilterChange} />\n      <h2>Lisää uusi</h2>\n      <NewPerson addPerson={addPerson} newName={newName}\n        handleNameChange={handleNameChange} newNumber={newNumber}\n        handleNumberChange={handleNumberChange} />\n      <h2>Numerot</h2>\n      {rows()}\n    </div>\n  )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}